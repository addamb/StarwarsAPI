// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	models "github.com/addamb/starwarsapi/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// SwapiI is an autogenerated mock type for the SwapiI type
type SwapiI struct {
	mock.Mock
}

type SwapiI_Expecter struct {
	mock *mock.Mock
}

func (_m *SwapiI) EXPECT() *SwapiI_Expecter {
	return &SwapiI_Expecter{mock: &_m.Mock}
}

// GetHumans provides a mock function with given fields: name
func (_m *SwapiI) GetHumans(name string) (models.SwapiResponse, error) {
	ret := _m.Called(name)

	var r0 models.SwapiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.SwapiResponse, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.SwapiResponse); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.SwapiResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwapiI_GetHumans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHumans'
type SwapiI_GetHumans_Call struct {
	*mock.Call
}

// GetHumans is a helper method to define mock.On call
//   - name string
func (_e *SwapiI_Expecter) GetHumans(name interface{}) *SwapiI_GetHumans_Call {
	return &SwapiI_GetHumans_Call{Call: _e.mock.On("GetHumans", name)}
}

func (_c *SwapiI_GetHumans_Call) Run(run func(name string)) *SwapiI_GetHumans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SwapiI_GetHumans_Call) Return(_a0 models.SwapiResponse, _a1 error) *SwapiI_GetHumans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SwapiI_GetHumans_Call) RunAndReturn(run func(string) (models.SwapiResponse, error)) *SwapiI_GetHumans_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlanet provides a mock function with given fields: url
func (_m *SwapiI) GetPlanet(url string) (models.SwapiPlanet, error) {
	ret := _m.Called(url)

	var r0 models.SwapiPlanet
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.SwapiPlanet, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) models.SwapiPlanet); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(models.SwapiPlanet)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwapiI_GetPlanet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlanet'
type SwapiI_GetPlanet_Call struct {
	*mock.Call
}

// GetPlanet is a helper method to define mock.On call
//   - url string
func (_e *SwapiI_Expecter) GetPlanet(url interface{}) *SwapiI_GetPlanet_Call {
	return &SwapiI_GetPlanet_Call{Call: _e.mock.On("GetPlanet", url)}
}

func (_c *SwapiI_GetPlanet_Call) Run(run func(url string)) *SwapiI_GetPlanet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SwapiI_GetPlanet_Call) Return(_a0 models.SwapiPlanet, _a1 error) *SwapiI_GetPlanet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SwapiI_GetPlanet_Call) RunAndReturn(run func(string) (models.SwapiPlanet, error)) *SwapiI_GetPlanet_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpecies provides a mock function with given fields: urls
func (_m *SwapiI) GetSpecies(urls []string) ([]models.SwapiSpecies, error) {
	ret := _m.Called(urls)

	var r0 []models.SwapiSpecies
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.SwapiSpecies, error)); ok {
		return rf(urls)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.SwapiSpecies); ok {
		r0 = rf(urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SwapiSpecies)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwapiI_GetSpecies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpecies'
type SwapiI_GetSpecies_Call struct {
	*mock.Call
}

// GetSpecies is a helper method to define mock.On call
//   - urls []string
func (_e *SwapiI_Expecter) GetSpecies(urls interface{}) *SwapiI_GetSpecies_Call {
	return &SwapiI_GetSpecies_Call{Call: _e.mock.On("GetSpecies", urls)}
}

func (_c *SwapiI_GetSpecies_Call) Run(run func(urls []string)) *SwapiI_GetSpecies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *SwapiI_GetSpecies_Call) Return(_a0 []models.SwapiSpecies, _a1 error) *SwapiI_GetSpecies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SwapiI_GetSpecies_Call) RunAndReturn(run func([]string) ([]models.SwapiSpecies, error)) *SwapiI_GetSpecies_Call {
	_c.Call.Return(run)
	return _c
}

// GetStarships provides a mock function with given fields: urls
func (_m *SwapiI) GetStarships(urls []string) ([]models.SwapiStarship, error) {
	ret := _m.Called(urls)

	var r0 []models.SwapiStarship
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.SwapiStarship, error)); ok {
		return rf(urls)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.SwapiStarship); ok {
		r0 = rf(urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SwapiStarship)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwapiI_GetStarships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStarships'
type SwapiI_GetStarships_Call struct {
	*mock.Call
}

// GetStarships is a helper method to define mock.On call
//   - urls []string
func (_e *SwapiI_Expecter) GetStarships(urls interface{}) *SwapiI_GetStarships_Call {
	return &SwapiI_GetStarships_Call{Call: _e.mock.On("GetStarships", urls)}
}

func (_c *SwapiI_GetStarships_Call) Run(run func(urls []string)) *SwapiI_GetStarships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *SwapiI_GetStarships_Call) Return(_a0 []models.SwapiStarship, _a1 error) *SwapiI_GetStarships_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SwapiI_GetStarships_Call) RunAndReturn(run func([]string) ([]models.SwapiStarship, error)) *SwapiI_GetStarships_Call {
	_c.Call.Return(run)
	return _c
}

// GetVehicles provides a mock function with given fields: urls
func (_m *SwapiI) GetVehicles(urls []string) ([]models.SwapiVehicles, error) {
	ret := _m.Called(urls)

	var r0 []models.SwapiVehicles
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.SwapiVehicles, error)); ok {
		return rf(urls)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.SwapiVehicles); ok {
		r0 = rf(urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SwapiVehicles)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwapiI_GetVehicles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVehicles'
type SwapiI_GetVehicles_Call struct {
	*mock.Call
}

// GetVehicles is a helper method to define mock.On call
//   - urls []string
func (_e *SwapiI_Expecter) GetVehicles(urls interface{}) *SwapiI_GetVehicles_Call {
	return &SwapiI_GetVehicles_Call{Call: _e.mock.On("GetVehicles", urls)}
}

func (_c *SwapiI_GetVehicles_Call) Run(run func(urls []string)) *SwapiI_GetVehicles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *SwapiI_GetVehicles_Call) Return(_a0 []models.SwapiVehicles, _a1 error) *SwapiI_GetVehicles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SwapiI_GetVehicles_Call) RunAndReturn(run func([]string) ([]models.SwapiVehicles, error)) *SwapiI_GetVehicles_Call {
	_c.Call.Return(run)
	return _c
}

// NewSwapiI creates a new instance of SwapiI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSwapiI(t interface {
	mock.TestingT
	Cleanup(func())
}) *SwapiI {
	mock := &SwapiI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
